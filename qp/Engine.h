/*****************************************************************************
* Model: query.qm
* File:  ./Engine.h
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${System::.::Engine.h} ...................................................*/
#pragma once

#include "qp_port.h"
#include "Events.h"
#include "Query.h"

enum QP_Signals {
    DUMMY_SIG = Q_USER_SIG,
    SYSTEM_SIG,
    TIMEOUT_SIG,
    NEW_REQUEST_SIG,
    NEW_DATA_SIG,
    NEW_DATA_TOUT_SIG,
    STEP_NEXT_SIG,
    STEP_FAILED_SIG,
    STEP_TIMEOUT_SIG,
    QUERY_TIMEOUT_SIG,
    QUERY_DONE_SIG,
    QUERY_FAILED_SIG,
    MAX_SIG               /* the last signal */
};

QActive *AO_system(void);

/*${System::SystemEvent} ...................................................*/
typedef struct {
/* protected: */
    QEvt super;

/* public: */
    Event_t event;
} SystemEvent;

/*${System::RequestEvent} ..................................................*/
typedef struct {
/* protected: */
    QEvt super;

/* private: */
    Request_p request;
} RequestEvent;


/*${System::Engine} ........................................................*/
typedef struct {
/* protected: */
    QActive super;

/* public: */
    QTimeEvt timeEvt;

/* private: */
    QEvt const * evtStorage[128];
} Engine;

/* public: */
void Engine_ctor(Engine * const me);

/* protected: */
QState Engine_initial(Engine * const me, QEvt const * const e);
QState Engine_Working(Engine * const me, QEvt const * const e);
QState Engine_Init(Engine * const me, QEvt const * const e);
QState Engine_Connect(Engine * const me, QEvt const * const e);
QState Engine_UPnP(Engine * const me, QEvt const * const e);
QState Engine_GetRootXml(Engine * const me, QEvt const * const e);
QState Engine_CheckConnection(Engine * const me, QEvt const * const e);
QState Engine_GetExtIP(Engine * const me, QEvt const * const e);
QState Engine_OpenPort(Engine * const me, QEvt const * const e);
QState Engine_UPnPDiscoverer(Engine * const me, QEvt const * const e);

